* C++ 爬虫 
  -> *URL:* _http://httpbin.org/_
  Hi,本期视频给大家带来一期c++ 的爬虫教程

  所谓爬虫就是通过代码去模拟浏览器访问网站
  现在的网站一般都使用https协议

** *HTTP* 协议网络和网络模型
   @table
   | HTTP     | HTTPS    | 描述       |
   | http     | http     | 应用层     |
   |          | SSL/TSL  | 安全层     |
   | tcp      | tcp      | 传输层     |
   | ip       | ip       | 网络层     |
   | 网络接口 | 网络接口 | 数据链路层 |
   @end


** http 通信流程
   url 提取域名地址
   dns -> ip
   tcp -> server
   server -> client
   client -> header
   server -> header
   return -> dataHtml src/img,css
   server.close tcp
   client. <-- header
** 代码
@code cpp
#include <cstdio>
#include <iostream>
#include <netinet/in.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string>
#include <string.h>
using namespace std;


class Tool {
  private:
    int cfd;
    int prot;
    hostent *host;
    string path;
  public:
    hostent * getUrlHost(string url);
    int ConnectServer(hostent *host);
    string Get();
    ~Tool() {
      shutdown(cfd, SHUT_RDWR);
      close(cfd);
    }
};

string Tool::Get() {
  string res = "";
  string header = "GET " + path + "\r\n";
  
  if(send(this->cfd, header.c_str(), header.length(), 0) == -1) {
    perror("Send");
  }
  
  int _len ;
  char bufer[BUFSIZ];
  
  while ((_len = recv(this->cfd, bufer, BUFSIZ, 0)) > 0) {
    cout << bufer << endl;
  }
  
  return res;
}

int Tool::ConnectServer(hostent *host) {
  // 创建socket结构体
  sockaddr_in addr;
  addr.sin_port = htons(this->prot);
  addr.sin_family = host->h_addrtype;
  memcpy(&addr.sin_addr, host->h_addr, host->h_length);
  // 创建tcp套接字
  int cfd = socket(host->h_addrtype, SOCK_STREAM, 0);
  
  if (cfd == -1) {
    perror("Socket");
  }
  
  // 发起tcp连接请求
  if(connect(cfd, (struct sockaddr *)&addr, sizeof(addr)) != -1) {
    cout << "tcp 请求成功" << endl;
    this->cfd = cfd;
    return cfd;
  } else {
    perror("connect");
  }

  return 0;
}


hostent * Tool::getUrlHost(string url) {
  if (url.find("http://") != -1) {
    this->prot = 80;
    url = url.substr(7, url.length());
  }
  
  int _n;
  
  if ( (_n = url.find("/")) != -1) {
    path = url.substr(_n, url.length());
  } else {
    path = "/";
  }
  
  url = url.substr(0, _n);
  std::cout << "URL: " << url << std::endl;
  host = gethostbyname(url.c_str());
  
  if (host != nullptr) {
    return host;
  }
  
  return nullptr;
}




int main (int argc, char *argv[]) {
  string url = "http://httpbin.org/";
  Tool tool;
  // 获取url解析之后的结构体
  hostent *host = tool.getUrlHost(url);
  // 建立tcp连接
  int cfd = tool.ConnectServer(host);
  // 发送http请求
  tool.Get();
  return 0;
}
 @end
** 本期资源
   [github] _https://github.com/denstiny/cppCode.git_

